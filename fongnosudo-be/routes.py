from flask import Blueprint, request, jsonify
from flask_jwt_extended import jwt_required, get_jwt_identity
from models import db, Post, User  # ƒê·ªïi t·ª´ .models th√†nh models
import os
import uuid
import logging

posts_bp = Blueprint('posts', __name__)

# Configure upload folder (create this folder in your backend directory)
UPLOAD_FOLDER = 'uploads'
os.makedirs(UPLOAD_FOLDER, exist_ok=True) # Ensure the directory exists

# Helper to generate slug
def generate_slug(title):
    import re
    import unicodedata

    title_no_accent = unicodedata.normalize('NFD', title).encode('ascii', 'ignore').decode('utf-8')
    slug = title_no_accent.lower()
    slug = re.sub(r'[^a-z0-9\s-]', '', slug)
    slug = re.sub(r'[\s_-]+', '-', slug)
    slug = re.sub(r'^-+|-+$', '', slug)
    
    return slug

@posts_bp.route('/posts', methods=['GET'])
def get_posts():
    is_featured = request.args.get('is_featured', type=str)
    is_latest = request.args.get('is_latest', type=str)
    limit = request.args.get('limit', type=int)
    query = Post.query

    if is_featured == 'true':
        query = query.filter_by(is_featured=True)

    query = query.order_by(Post.created_at.desc())

    if is_latest == 'true' and limit:
        # N·∫øu y√™u c·∫ßu b√†i vi·∫øt m·ªõi nh·∫•t v√† c√≥ gi·ªõi h·∫°n
        posts = query.filter_by(is_latest=True).limit(limit).all()
    elif is_latest == 'true':
        # N·∫øu y√™u c·∫ßu b√†i vi·∫øt m·ªõi nh·∫•t nh∆∞ng kh√¥ng c√≥ gi·ªõi h·∫°n (tr·∫£ v·ªÅ t·∫•t c·∫£ theo th·ª© t·ª± m·ªõi nh·∫•t)
        posts = query.filter_by(is_latest=True)
    elif is_featured == 'true':
        # N·∫øu ch·ªâ y√™u c·∫ßu b√†i vi·∫øt n·ªïi b·∫≠t (ƒë√£ ƒë∆∞·ª£c filter ·ªü tr√™n)
        posts = query.filter_by(is_featured=True)
    else:
        posts = query.all()

    if not posts:
        return jsonify([]), 200 
    
    # posts = Post.query.order_by(Post.created_at.desc()).all()
    output = []
    if not posts:
        return jsonify({"msg": "B√†i vi·∫øt kh√¥ng t√¨m th·∫•y."}), 404
    output = []
    for post in posts:
       
        output.append({
            'id': post.id,
            'title': post.title,
            'slug': post.slug,
            'image_url': post.image_url,
            'created_at': post.created_at.isoformat(),
            'author': post.author.username,
            'content': post.content, 
            'is_featured': post.is_featured, 
            'is_latest': post.is_latest 
        })
    return jsonify(output), 200

# @posts_bp.route('/posts/<string:slug>', methods=['GET'])
# def get_post(slug):
#     post = Post.query.filter_by(slug=slug).first_or_404()
#     return jsonify({
#         'id': post.id,
#         'title': post.title,
#         'slug': post.slug,
#         'content': post.content,
#         'image_url': post.image_url,
#         'created_at': post.created_at.isoformat(),
#         'updated_at': post.updated_at.isoformat(),
#         'author': post.author.username
#     }), 200
@posts_bp.route('/posts/<string:slug>', methods=['GET'])
def get_post(slug):
    post = Post.query.filter_by(slug=slug).first()
    if not post:
        return jsonify({"msg": "B√†i vi·∫øt kh√¥ng t√¨m th·∫•y."}), 404
    
    # ƒê·∫£m b·∫£o b·∫°n tr·∫£ v·ªÅ ƒë·∫ßy ƒë·ªß c√°c tr∆∞·ªùng c·∫ßn thi·∫øt, bao g·ªìm 'content'
    # v√† 'author' l√† m·ªôt dictionary (object) nh∆∞ frontend mong ƒë·ª£i.
    post_data = {
        'id': post.id,
        'title': post.title,
        'slug': post.slug,
        'content': post.content, # ƒê·∫£m b·∫£o c√≥ tr∆∞·ªùng n√†y
        'image_url': post.image_url,
        'created_at': post.created_at.isoformat(),
        'updated_at': post.updated_at.isoformat() if post.updated_at else None,
        'author': { 
            'id': post.author.id,
            'username': post.author.username
        } if post.author else None,
        'is_featured': post.is_featured, 
        'is_latest': post.is_latest 
    }
    return jsonify(post_data), 200

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

@posts_bp.route('/posts', methods=['POST'])
@jwt_required()
def create_post():
    logger.info("--- B·∫Øt ƒë·∫ßu x·ª≠ l√Ω y√™u c·∫ßu t·∫°o b√†i vi·∫øt m·ªõi ---")

    current_user_id = get_jwt_identity()
    logger.info(f"Ng∆∞·ªùi d√πng hi·ªán t·∫°i (ID): {current_user_id}")

    try:
        data = request.get_json()
        logger.info(f"D·ªØ li·ªáu JSON nh·∫≠n ƒë∆∞·ª£c: {data}")
    except Exception as e:
        logger.error(f"L·ªói khi parse JSON t·ª´ request: {e}")
        return jsonify({"msg": "Invalid JSON format"}), 400

    if not data:
        logger.warning("Kh√¥ng c√≥ d·ªØ li·ªáu JSON n√†o ƒë∆∞·ª£c cung c·∫•p trong y√™u c·∫ßu.")
        return jsonify({"msg": "No data provided"}), 400

    title = data.get('title')
    logger.info(f"Gi√° tr·ªã c·ªßa 'title': {title}, ki·ªÉu d·ªØ li·ªáu: {type(title)}")
    if not title or not isinstance(title, str):
        logger.error(f"L·ªói x√°c th·ª±c: 'title' ph·∫£i l√† m·ªôt chu·ªói kh√¥ng r·ªóng. Gi√° tr·ªã hi·ªán t·∫°i: {title}, ki·ªÉu: {type(title)}")
        return jsonify({"msg": "Title must be a non-empty string"}), 422
    logger.info(f"Gi√° tr·ªã 'title' h·ª£p l·ªá: '{title}'")

    content = data.get('content')
    logger.info(f"Gi√° tr·ªã c·ªßa 'content': {content}, ki·ªÉu d·ªØ li·ªáu: {type(content)}")
    if not content or not isinstance(content, str):
        logger.error(f"L·ªói x√°c th·ª±c: 'content' ph·∫£i l√† m·ªôt chu·ªói kh√¥ng r·ªóng. Gi√° tr·ªã hi·ªán t·∫°i: {content}, ki·ªÉu: {type(content)}")
        return jsonify({"msg": "Content must be a non-empty string"}), 422
    logger.info(f"Gi√° tr·ªã 'content' h·ª£p l·ªá: '{content}'")

    image_url = data.get('image_url')
    logger.info(f"Gi√° tr·ªã c·ªßa 'image_url': {image_url}, ki·ªÉu d·ªØ li·ªáu: {type(image_url)}")
    
    slug = generate_slug(title)
    logger.info(f"Slug ban ƒë·∫ßu ƒë∆∞·ª£c t·∫°o: {slug}")

    existing_post = Post.query.filter_by(slug=slug).first()
    if existing_post:
        original_slug = slug
        slug = f"{slug}-{str(uuid.uuid4())[:8]}"
        logger.warning(f"Slug '{original_slug}' ƒë√£ t·ªìn t·∫°i. T·∫°o slug m·ªõi: '{slug}'")

    try:
        new_post = Post(title=title.strip(), slug=slug, content=content, image_url=image_url, author_id=current_user_id)
        db.session.add(new_post)
        db.session.commit()
        logger.info(f"B√†i vi·∫øt m·ªõi (ID: {new_post.id}, Slug: {new_post.slug}) ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng.")
        return jsonify({"msg": "Post created", "id": new_post.id, "slug": new_post.slug}), 201
    except Exception as e:
        db.session.rollback()
        logger.exception(f"L·ªói khi l∆∞u b√†i vi·∫øt v√†o c∆° s·ªü d·ªØ li·ªáu: {e}")
        return jsonify({"msg": f"Failed to create post due to database error: {str(e)}"}), 500
    
    
@posts_bp.route('/posts/<string:post_slug>', methods=['PUT'])
@jwt_required()
def update_post(post_slug):
    current_user_id = get_jwt_identity()
    logger.info(f"Ng∆∞·ªùi d√πng hi·ªán t·∫°i (ID): {current_user_id}")
    post = Post.query.filter_by(slug=post_slug).first_or_404()

    logger.info(f"atuthor id: { post.author_id}")
    if post.author_id != current_user_id: 
        return jsonify({"msg": "Unauthorized to update this post"}), 403

    data = request.get_json()
    post.title = data.get('title', post.title)
    post.content = data.get('content', post.content)
    post.image_url = data.get('image_url', post.image_url)
    post.is_featured = data.get('is_featured', post.is_featured)
    post.is_latest = data.get('is_latest', post.is_latest)

    if 'title' in data: 
        post.slug = generate_slug(post.title)
        

    db.session.commit()
    return jsonify({"msg": "Post updated"}), 200

# @posts_bp.route('/posts/<int:post_id>', methods=['DELETE'])
# @jwt_required()
# def delete_post(post_id):
#     current_user_id = get_jwt_identity()
#     post = Post.query.get_or_404(post_id)

#     # Ensure only the author or a super admin can delete
#     logger.info(f"Ng∆∞·ªùi d√πng hi·ªán t·∫°i (ID): {current_user_id}")
#     logger.info(f"ID b√†i vi·∫øt c·∫ßn x√≥a: {post_id}, ID t√°c gi·∫£ b√†i vi·∫øt: {post.author_id}")
#     if post.author_id != current_user_id: # Add check for is_admin if applicable
#         return jsonify({"msg": "Unauthorized to delete this post"}), 403

#     db.session.delete(post)
#     db.session.commit()
#     return jsonify({"msg": "Post deleted"}), 204
@posts_bp.route('/posts/<int:post_id>', methods=['DELETE'])
@jwt_required()
def delete_post(post_id):
    try:
        current_user_id = get_jwt_identity()
        logger.info(f"Ng∆∞·ªùi d√πng hi·ªán t·∫°i (ID): {current_user_id}")
        
        post = Post.query.get(post_id)
        if not post:
            logger.warning(f"Post {post_id} kh√¥ng t·ªìn t·∫°i")
            return jsonify({"msg": "B√†i vi·∫øt kh√¥ng t·ªìn t·∫°i"}), 404
        
        logger.info(f"ID b√†i vi·∫øt c·∫ßn x√≥a: {post_id}, ID t√°c gi·∫£ b√†i vi·∫øt: {post.author_id}")
        
        # DEBUG
        logger.info(f"üîç current_user_id: {current_user_id} (type: {type(current_user_id)})")
        logger.info(f"üîç post.author_id: {post.author_id} (type: {type(post.author_id)})")
        logger.info(f"üîç Raw comparison: {current_user_id} == {post.author_id}")
        logger.info(f"üîç Comparison result: {current_user_id == post.author_id}")
        
        # Convert both
        current_user_int = int(current_user_id)
        post_author_int = int(post.author_id)
        
        logger.info(f"üîç After int conversion:")
        logger.info(f"üîç current_user_int: {current_user_int}")
        logger.info(f"üîç post_author_int: {post_author_int}")
        logger.info(f"üîç Int comparison: {current_user_int == post_author_int}")
        
    
        if post_author_int != current_user_int:
            logger.warning(f"‚ùå Authorization FAILED after int conversion")
            logger.warning(f"‚ùå {post_author_int} != {current_user_int}")
            return jsonify({"msg": "Unauthorized to delete this post"}), 403
        
        logger.info(f"‚úÖ Authorization SUCCESS - proceeding with delete")
        
        
        db.session.delete(post)
        db.session.commit()
        
        logger.info(f"‚úÖ Post {post_id} deleted successfully")
        return jsonify({"msg": "B√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng"}), 200
        
    except Exception as e:
        db.session.rollback()
        logger.error(f"üí• Exception in delete_post: {str(e)}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        return jsonify({"msg": f"Server error: {str(e)}"}), 500
    
@posts_bp.route('/upload-image', methods=['POST'])
@jwt_required()
def upload_image():
    print("Request files:", request.files) 
    if 'file' not in request.files:
        return jsonify({"msg": "No file part"}), 400
    file = request.files['file']
    if file.filename == '':
        return jsonify({"msg": "No selected file"}), 400
    if file:
        filename = str(uuid.uuid4()) + os.path.splitext(file.filename)[1] # Unique filename
        filepath = os.path.join(UPLOAD_FOLDER, filename)
        file.save(filepath)
        # Return the URL relative to the Flask server base URL
        return jsonify({"image_url": f"/uploads/{filename}"}), 201
    return jsonify({"msg": "Upload failed"}), 500